function AbzoobaWidgets(params){
	console.log ("About to create Abzooba widget of type " + params.type);
	/*if (params.type == "Grid")
		this.widget = new Grid (params);
	if (params.type == "AppHomePageGrid")
		this.widget = new AppHomePageGrid (params);
	
	if (params.type == "KPIStrip")
		this.widget = new KPIStrip (params);
	
	if (params.type == "WordCloud")
		this.widget = new WordCloud (params);
	
	if (params.type == "XPressoDistiller")
		this.widget = new XPressoDistiller (params);
	
	if (params.type == "EntityHighlighter")
		this.widget = new EntityHighlighter (params);
	
	if (params.type == "ImageAnnotator")
		this.widget = new ImageAnnotator (params);

	if (params.type == "AnnotatorAllocator")
		this.widget = new AnnotatorAllocator (params);

	if (params.type == "ImageSegmentor")
		this.widget = new ImageSegmentor (params);
	*/
	this.widget = new window[params.type](params);


	console.log (this.widget);
	console.log ("Created widget of type " + params.type);
	//this.setJSONData = function (results){this.widget.setJSONData (results);};
	//this.render = function(containerID){this.widget.render (containerID);};
	
	console.log ("Returning " + this.widget);
	this.widget.id = params.id;
	return this.widget;
}

var DEF_SHOW_COL_NAMES = "true";
//var DEF_HEADER_FONT = "bold 15px verdana,sans-serif";
var DEF_HEADER_FONT = "bold 18px roboto, sans-serif";
var DEF_HEADER_TEXT_COLOR="white";
var DEF_HEADER_BACKGROUND_COLOR = "#808080";
var DEF_COL_TYPE = "text";
var DEF_SHOW_COL_NAMES = "true";
var DEF_HEADER_TEXT_COLOR="white";
var DEF_HEADER_BACKGROUND_COLOR = "#808080";
var DEF_COL_TYPE = "text";
//var DEF_ODD_ROW_FONT = "10px verdana,sans-serif";
var DEF_ODD_ROW_FONT = "10px roboto,sans-serif";
var DEF_ODD_ROW_TEXT_COLOR = "black";
var DEF_ODD_ROW_BACKGROUND_COLOR = "#A0A0A0";
//var DEF_EVEN_ROW_FONT = "10px verdana,sans-serif";
var DEF_EVEN_ROW_FONT = "10px roboto,sans-serif";
var DEF_EVEN_ROW_TEXT_COLOR = "black";
var DEF_EVEN_ROW_BACKGROUND_COLOR = "#C0C0C0";
var DEF_HEADER_BORDER = "2px solid black"
var DEF_CELL_BORDER = "2px solid black";
var DEF_CAPTION_FONT="\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif";
var DEF_PAGE_LENGTH=5;

//GRID COMPONENT
function AppHomePageGrid (params){
	// properties
	// showColNames, ColWidths, rowHeights, headerFont, headerTextColor, headerBackgroundColor
	// colTypes, oddRowFont, oddRowTextColor, oddRowBackgroundColor, evenRowFont, evenRowTextColor, evenRowBackgroundColor
	// headerBorder, cellBorder
	var DEF_PAGE_LENGTH=10;
	console.log ("Creating AppHomePageGrid");
	console.log("this.name="+JSON.stringify(params.name));
	this.params = params;
	this.properties = params.properties;
	// set defaults
	var str=JSON.stringify(params);
	console.log("Datatable Params="+str);
	console.log("Datatable Name="+this.properties.name);
	if (this.properties.showColNames == null)
		this.properties.showColNames = DEF_SHOW_COL_NAMES;
	if (this.properties.headerFont == null)
		this.properties.headerFont = DEF_HEADER_FONT;
	if (this.properties.headerTextColor == null)
		this.properties.headerTextColor = DEF_HEADER_TEXT_COLOR;
	if (this.properties.headerBackgroundColor == null)
		this.properties.headerBackgroundColor = DEF_HEADER_BACKGROUND_COLOR;
	if (this.properties.oddRowFont == null)
		this.properties.oddRowFont = DEF_ODD_ROW_FONT;
	if (this.properties.oddRowTextColor == null)
		this.properties.oddRowTextColor = DEF_ODD_ROW_TEXT_COLOR;
	if (this.properties.oddRowBackgroundColor == null)
		this.properties.oddRowBackgroundColor = DEF_ODD_ROW_BACKGROUND_COLOR;
	if (this.properties.evenRowFont == null)
		this.properties.evenRowFont = DEF_EVEN_ROW_FONT;
	if (this.properties.evenRowTextColor == null)
		this.properties.evenRowTextColor = DEF_EVEN_ROW_TEXT_COLOR;
	if (this.properties.evenRowBackgroundColor == null)
		this.properties.evenRowBackgroundColor = DEF_EVEN_ROW_BACKGROUND_COLOR;
	if (this.properties.headerBorder == null)
		this.properties.headerBorder = DEF_HEADER_BORDER;
	if (this.properties.cellBorder == null)
		this.properties.cellBorder = DEF_CELL_BORDER;
	if (this.properties.captionFont == null)
		this.properties.captionFont = DEF_CAPTION_FONT;
	if (this.properties.pageLength == null)
		this.properties.pageLength = DEF_PAGE_LENGTH;
	
	if(this.properties.pageLength!=null)
		{
		var lengthMenu=[ 10, 25, 50, 100 ];
		lengthMenu.push(this.properties.pageLength);
		lengthMenu.sort(function(a, b){return a-b});
		console.log(lengthMenu);
		this.properties.lengthMenu=lengthMenu;
		}
	
	if(this.properties.gridFont!=null)
		{
		this.properties.headerFont = this.properties.oddRowFont = this.properties.evenRowFont= this.properties.gridFont;
		console.log(this.properties.headerFont , this.properties.oddRowFont , this.properties.evenRowFont);
		}
	if(this.properties.bodyFont!=null)
	{
	this.properties.oddRowFont = this.properties.evenRowFont= this.properties.bodyFont;
	console.log(this.properties.oddRowFont , this.properties.evenRowFont);
	}

	if(this.properties.sortBy!=null)
		{/*
		var sortBy=this.properties.sortBy;
		JSON.stringify(sortBy);
		console.log(sortBy);
		sortBy=sortBy.toString();
		sortBy=String(sortBy);
		if(typeof sortBy !== 'string') {
	        throw new Error('only string parameter supported!');
	    }
		sortBy.replace(",","],[");
		sortBy.replace("{","[[");
		sortBy.replace("}","]]");
		sortBy.replace(":",",");
		console.log(sortBy.toString());*/
		//this.properties.aaSorting="[[1,'desc']]";
		//this.properties.aDataSort="[1]";
		}
	if (this.properties.bFilter == "true")
		this.properties.bFilter = true;
	else
		this.properties.bFilter = true;
	
	if (this.properties.bLengthChange == "true")
		this.properties.bLengthChange = true;
	else
		this.properties.bLengthChange = false;

	if (this.properties.bSort == "false")
		this.properties.bSort = false;
	else
		this.properties.bSort = true;

	if (this.properties.bInfo == "false")
		this.properties.bInfo = false;
	else
		this.properties.bInfo = true;

	if (this.properties.bPaginate == "false")
		this.properties.bPaginate = false;
	else
		this.properties.bPaginate = true;
	
	this.properties.colTypes = ["text","link","text"];
	this.properties.aoColumns= [{ "bSortable": false },{ "bSortable": true },{ "bSortable": false } ]; 
	this.properties.sDom='<"H"lr>t<"F"ip>';
	this.properties.pagingType= "simple";

	this.setJSONData = function (results, name, properties){
		console.log("in AbzoobaWidgets.setJSONData");
		console.log("AbzoobaWidgets.setJSONData.results="+results);
		console.log("Grid.SetJSONData,name="+JSON.stringify(name));
		console.log("Grid.SetJSONData,properties="+JSON.stringify(properties));
		this.results = results;	
		if (this.properties.colTypes == null){
			console.log("colTypes = null");
			this.properties.colTypes = new Array();
			var i;
			for (i = 0; i < this.results.column_names.length; i ++)
				this.properties.colTypes[i] = DEF_COL_TYPE;
		}
		if (this.properties.colAlignments == null){
			console.log("colAlignments = null");
			this.properties.colAlignments = new Array();
			var i;
			for (i = 0; i < this.results.column_names.length; i ++){
				this.properties.colAlignments[i] = "center";
			}
		}

	};
	this.render = function (containerID){
		this.containerID = containerID;
		console.log("containedID="+containerID);
		$("#" + containerID).empty();
		var html = "<div style=\"overflow:inherit;width:" + this.properties.width + ";height:" + this.properties.height + ";\"><table width=\"100%\" class=\"display\" id=\"" + containerID + "_table" + "\">";
		/* Widget Caption */
		//html+="<caption style=\"color: #000000;font-size: 22px;fill: #000000;font-family:" + this.properties.captionFont + "\"><center>" + this.params.name + "</center></caption>";
		var i, j;
		var data = this.results.rows;
		//console.log("data="+JSON.stringify(data));
		var colNames = this.results.column_names;
		console.log("colNames="+JSON.stringify(colNames));
		console.log("colNames.length="+colNames.length+colNames[0]+colNames[1]);
		/*if (this.container.listeners.length > 0){
			// add a column to colNames array as well as to data array
			var newColNames = new Array();
			newColNames.push ("Click");
			for (i = 0; i < colNames.length; i ++)
				newColNames.push (colNames[i]);
			colNames = newColNames;
			
			for (i = 0; i < data.length; i ++){
				var newRow = new Array();
				newRow.push ("<img src=\"../ubaweb/images/plus-icon.png\"></img>");
				for (j = 0; j < data[i].length; j ++)
					newRow.push (data[i][j]);
				data[i] = newRow;
				
			}
		}*/
		html += "<thead class=\" t-head row\">"
		if (this.properties.showColNames == "true"){
			html += "<tr>";
			//for (i = 0; i < colNames.length; i ++)
				{
				console.log("showColNames="+true);
				//html += "<th style=\"border:" + this.properties.headerBorder + ";font:" + this.properties.headerFont + ";color:" + this.properties.headerFont + ";background-color:" + this.properties.headerBackgroundColor + "\">" + colNames[i] + "</th>"; 
				//html += "<th style=\"font:" + this.properties.headerFont+ ";\"><center>" + colNames[i] + "</center></th>";
				html += "<th><div class=\"col no\"></div></th><th id=\"appName\" style=\"font:" + this.properties.headerFont+ ";\"><div align=\"Left\" class=\"applications\">" + colNames[0] + "</div></th>";
				//html += "<th style=\"font:" + this.properties.headerFont+ ";\"><div align=\"Right\">" + colNames[1] + "</div></th>";
				html +="<th style=\"font:" + this.properties.headerFont+ ";\"><div class=\"pull-right h-actions\"><span class=\"pointer\"><span class=\"glyphicon glyphicon-sort\" aria-hidden=\"true\"></span></span><span class=\"pointer row-search-btn\" onClick=\"showSearch();\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></span><div class=\"search rowSearch\" style=\"display:none;\"><input type=\"\" name=\"\" id=\"searchbox\" placeholder=\"Search applications\"><button type=\"submit\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></button></div> </th>";			
				}
			html += "</tr>";
		}
		else {

			html += "<tr>";
			//for (i = 0; i < colNames.length; i ++)
				{
				//console.log("showColNames="+false+"colNames["+i+"]="+colNames[i]);
				//html += "<th style=\"border:" + this.properties.headerBorder + ";font:" + this.properties.headerFont + ";color:" + this.properties.headerFont + ";background-color:" + this.properties.headerBackgroundColor + "\">" + colNames[i] + "</th>"; 
				html += "<th><div class=\"col no\">&nbsp;</div></th><th id=\"appName\" style=\"font:" + this.properties.headerFont+ ";\"><div align=\"Left\">" + colNames[0] + "</div></th>";
				html += "<th style=\"font:" + this.properties.headerFont+ ";\"><div align=\"Right\">" + colNames[1] + "</div></th>";
			
				}
			html += "</tr>";
			
		}
		html += "</thead>";
		//console.log("html="+html);
		html += "<tbody>";
		console.log(" data.length="+ data.length);
		//console.log(" data="+ data);
		for (i = 0; i < data.length; i ++){
			if (i%2 == 0)
				html += "<tr class=\" tRow\" style=\"font:" + this.properties.evenRowFont + ";color:" + this.properties.evenRowFont + ";\">";
			else 
				html += "<tr class=\" tRow\" style=\"font:" + this.properties.oddRowFont + ";color:" + this.properties.oddRowFont + ";\">";
			//html += "<tr>";
			//for (j = 0; j < colNames.length; j ++){
				//html += "<td style=\"height:50px;border:" + this.properties.cellBorder + "\" ";
				//console.log("i="+i+"j="+j);
				
				html += "<td><div class=\"col no\">&nbsp;</div></td><td align=\"Left\"";
				if ((this.properties.colors != null) || (this.properties.fonts != null)){
					html += " style=\"";
					if (this.properties.colors != null)
						html += "color:" + this.properties.colors[j] + ";";
					if (this.properties.fonts != null)
						html += "font:" + this.properties.fonts[j] + ";"
					html += "\"";
				}
				html += ">";
				/*if (this.properties.colTypes[j] == "image"){
					if (data[i][j] != "" )
						html += "<img src=\"" + data[i][j] + "\" height=\"" + this.properties.imageHeight + "\" width=\"" + this.properties.imageWidth + "\"/>";
					else
						html += "&nbsp;";
				}
				else*/ 
				//$(link).attr("href", "javascript:parent.document.location='/ubaweb/index.jsp?app_name=" + data.results[i].name+"'");
					html += "<div class=\"applications\"><a href=\"javascript:parent.document.location='/ubaweb/index.jsp?app_name="+data[i].name+"'\"><h3 style=\"  color:#000000;\">"+data[i].name+"</h3></a></div>";
				html += "</td>";
				html += "<td align=\"right\"";
				if ((this.properties.colors != null) || (this.properties.fonts != null)){
					html += " style=\"";
					if (this.properties.colors != null)
						html += "color:" + this.properties.colors[j] + ";";
					if (this.properties.fonts != null)
						html += "font:" + this.properties.fonts[j] + ";"
					html += "\"";
				}
				html += ">";
				/*if (this.properties.colTypes[j] == "image"){
					if (data[i][j] != "" )
						html += "<img src=\"" + data[i][j] + "\" height=\"" + this.properties.imageHeight + "\" width=\"" + this.properties.imageWidth + "\"/>";
					else
						html += "&nbsp;";
				}
				else*/ 
					html += "<div class=\"pull-left\" style=\"padding-left:400px;\">"+data[i].title+"</div><div ><a href=\"javascript:parent.document.location='/ubaweb/index.jsp?app_name="+data[i].name+"'\" class=\"actions\"><span class=\"pointer preview\"><i class=\"fa fa-eye\" aria-hidden=\"true\" ></i></span></a></div>";
				html += "</td>";
			//}
			html += "</tr>";
		}
		html += "</tbody>";
		html += "</table></div>";
		console.log("containerID="+containerID);
		$("#" + containerID).append (html);
		console.log("this="+(this).id);

		  var language= {
		    language:{paginate: {
		      next: '>', // or '→'
		      previous: '<' // or '←' 
		    }
		  }};
		 // $.extend(true,this.properties,language);
		var myTable = $("#" + containerID + "_table").DataTable(this.properties);
		this.table = myTable;
		myTable.parent = this;
		var extSort=$(".glyphicon-sort");
		$(extSort).attr("onClick","appSort();");

		myTable.on( 'order.dt search.dt', function () {
			myTable.column(0, {search:'applied'}).nodes().each( function (cell, i) {
		            cell.innerHTML ="<div class=\"col no\">"+ (i+1)+"</div>";
		        } );
		    } ).draw();
		/*if (this.container.listeners.length > 0){
			// add + icon to first col of each row
			var rows = myTable.rows();
			var i;
			//for (i = 0; i < rows.length; i ++)
			//	rows[i].data().push("a");
			$("#" + containerID + "_table").on('click', 'td', function(){var row = myTable.row($(this).parents('tr')[0]);m_Controller.app.drilldown(myTable.parent.id, row, row.data())});	
		}*/
		//	console.log (html);
	};
	  

	console.log ("Done");
}
// GRID COMPONENT
function Grid (params){
	// properties
	// showColNames, ColWidths, rowHeights, headerFont, headerTextColor, headerBackgroundColor
	// colTypes, oddRowFont, oddRowTextColor, oddRowBackgroundColor, evenRowFont, evenRowTextColor, evenRowBackgroundColor
	// headerBorder, cellBorder
	console.log ("Creating grid");
	this.params = params;
	this.properties = params.properties;
	// set defaults
	var str=JSON.stringify(params);
	console.log("Datatable Params="+str);
	if (this.properties.showColNames == null)
		this.properties.showColNames = DEF_SHOW_COL_NAMES;
	if (this.properties.headerFont == null)
		this.properties.headerFont = DEF_HEADER_FONT;
	if (this.properties.headerTextColor == null)
		this.properties.headerTextColor = DEF_HEADER_TEXT_COLOR;
	if (this.properties.headerBackgroundColor == null)
		this.properties.headerBackgroundColor = DEF_HEADER_BACKGROUND_COLOR;
	if (this.properties.oddRowFont == null)
		this.properties.oddRowFont = DEF_ODD_ROW_FONT;
	if (this.properties.oddRowTextColor == null)
		this.properties.oddRowTextColor = DEF_ODD_ROW_TEXT_COLOR;
	if (this.properties.oddRowBackgroundColor == null)
		this.properties.oddRowBackgroundColor = DEF_ODD_ROW_BACKGROUND_COLOR;
	if (this.properties.evenRowFont == null)
		this.properties.evenRowFont = DEF_EVEN_ROW_FONT;
	if (this.properties.evenRowTextColor == null)
		this.properties.evenRowTextColor = DEF_EVEN_ROW_TEXT_COLOR;
	if (this.properties.evenRowBackgroundColor == null)
		this.properties.evenRowBackgroundColor = DEF_EVEN_ROW_BACKGROUND_COLOR;
	if (this.properties.headerBorder == null)
		this.properties.headerBorder = DEF_HEADER_BORDER;
	if (this.properties.cellBorder == null)
		this.properties.cellBorder = DEF_CELL_BORDER;
	if (this.properties.captionFont == null)
		this.properties.captionFont = DEF_CAPTION_FONT;
	if (this.properties.pageLength == null)
		this.properties.pageLength = DEF_PAGE_LENGTH;
	
	if(this.properties.pageLength!=null)
		{
		var lengthMenu=[ 10, 25, 50, 100 ];
		lengthMenu.push(this.properties.pageLength);
		lengthMenu.sort(function(a, b){return a-b});
		console.log(lengthMenu);
		this.properties.lengthMenu=lengthMenu;
		}
	
	if(this.properties.gridFont!=null)
		{
		this.properties.headerFont = this.properties.oddRowFont = this.properties.evenRowFont= this.properties.gridFont;
		console.log(this.properties.headerFont , this.properties.oddRowFont , this.properties.evenRowFont);
		}
	if(this.properties.bodyFont!=null)
	{
	this.properties.oddRowFont = this.properties.evenRowFont= this.properties.bodyFont;
	console.log(this.properties.oddRowFont , this.properties.evenRowFont);
	}

	if(this.properties.sortBy!=null)
		{/*
		var sortBy=this.properties.sortBy;
		JSON.stringify(sortBy);
		console.log(sortBy);
		sortBy=sortBy.toString();
		sortBy=String(sortBy);
		if(typeof sortBy !== 'string') {
	        throw new Error('only string parameter supported!');
	    }
		sortBy.replace(",","],[");
		sortBy.replace("{","[[");
		sortBy.replace("}","]]");
		sortBy.replace(":",",");
		console.log(sortBy.toString());*/
		//this.properties.aaSorting="[[1,'desc']]";
		//this.properties.aDataSort="[1]";
		}
	if (this.properties.bFilter == "true")
		this.properties.bFilter = true;
	else
		this.properties.bFilter = false;
	
	if (this.properties.bLengthChange == "true")
		this.properties.bLengthChange = true;
	else
		this.properties.bLengthChange = false;

	if (this.properties.bSort == "false")
		this.properties.bSort = false;
	else
		this.properties.bSort = true;

	if (this.properties.bInfo == "false")
		this.properties.bInfo = false;
	else
		this.properties.bInfo = true;

	if (this.properties.bPaginate == "false")
		this.properties.bPaginate = false;
	else
		this.properties.bPaginate = true;

	this.setJSONData = function (results, name, properties){
		//console.log("Grid.SetJSONData,results="+JSON.stringify(results));
		this.results = results;	
		if (this.properties.colTypes == null){
			this.properties.colTypes = new Array();
			var i;
			for (i = 0; i < this.results.column_names.length; i ++)
				this.properties.colTypes[i] = DEF_COL_TYPE;
		}
		if (this.properties.colAlignments == null){
			this.properties.colAlignments = new Array();
			var i;
			for (i = 0; i < this.results.column_names.length; i ++){
				if (this.properties.colTypes[i] == "numeric")
					this.properties.colAlignments[i] = "right";
				else
					this.properties.colAlignments[i] = "center";
			}
		}

	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		var html = "<div style=\"overflow:inherit;width:" + this.properties.width + ";height:" + this.properties.height + ";\"><table width=\"100%\" class=\"display\" id=\"" + containerID + "_table" + "\">";
		var i, j;
		var data = this.results.rows;
		var colNames = this.results.column_names;
		if (this.container.listeners.length > 0){
			// add a column to colNames array as well as to data array
			var newColNames = new Array();
			newColNames.push ("Click");
			for (i = 0; i < colNames.length; i ++)
				newColNames.push (colNames[i]);
			colNames = newColNames;
			
			for (i = 0; i < data.length; i ++){
				var newRow = new Array();
				newRow.push ("<img src=\"../ubaweb/images/plus-icon.png\"></img>");
				for (j = 0; j < data[i].length; j ++)
					newRow.push (data[i][j]);
				data[i] = newRow;
				
			}
		}
		html += "<thead>"
		if (this.properties.showColNames == "true"){
			html += "<tr>";
			for (i = 0; i < colNames.length; i ++)
				//html += "<th style=\"border:" + this.properties.headerBorder + ";font:" + this.properties.headerFont + ";color:" + this.properties.headerFont + ";background-color:" + this.properties.headerBackgroundColor + "\">" + colNames[i] + "</th>"; 
				html += "<th style=\"font:" + this.properties.headerFont+ ";\"><center>" + colNames[i] + "</center></th>";
			html += "</tr>";
		}
		else {
			html += "<tr>";
			for (i = 0; i < colNames.length; i ++)
				html += "<th></th>";
			html += "</tr>";
			
		}
		html += "</thead>";
		html += "<tbody>";
		for (i = 0; i < data.length; i ++){
			if (i%2 == 0)
				html += "<tr style=\"font:" + this.properties.evenRowFont + ";color:" + this.properties.evenRowFont + ";\">";
			else 
				html += "<tr style=\"font:" + this.properties.oddRowFont + ";color:" + this.properties.oddRowFont + ";\">";
			//html += "<tr>";
			for (j = 0; j < colNames.length; j ++){
				//html += "<td style=\"height:50px;border:" + this.properties.cellBorder + "\" ";
				html += "<td align=\"" + this.properties.colAlignments[j] + "\"";
				if ((this.properties.colors != null) || (this.properties.fonts != null)){
					html += " style=\"";
					if (this.properties.colors != null)
						html += "color:" + this.properties.colors[j] + ";";
					if (this.properties.fonts != null)
						html += "font:" + this.properties.fonts[j] + ";"
					html += "\"";
				}
				html += "><center>";
				if (this.properties.colTypes[j] == "image"){
					if (data[i][j] != "" )
						html += "<img src=\"" + data[i][j] + "\" height=\"" + this.properties.imageHeight + "\" width=\"" + this.properties.imageWidth + "\"/>";
					else
						html += "&nbsp;";
				}
				else 
					html += data[i][j];
				html += "</center></td>";
			}
			html += "</tr>";
		}
		html += "</tbody>";
		html += "</table><div>";
		console.log("containerID="+containerID);
		$("#" + containerID).append (html);
		console.log("this="+(this).id);
		var myTable = $("#" + containerID + "_table").DataTable(this.properties);
		this.table = myTable;
		myTable.parent = this;


		if (this.container.listeners.length > 0){
			var regex = /(<([^>]+)>)/ig;
			/*---------Commented codes are for creating data as 'array of objects' ex. [{key:'',value:''},{key:'',value:''}]----------*/
			//var customData = [];
			$("#" + containerID + "_table").on('click', 'td', function(){
				var row = myTable.row($(this).parents('tr')[0]);
				var rowData = row.data();
				/*generating data array of table row*/
				rowData.forEach(function(elm,idx){
					rowData[idx] = rowData[idx].replace(regex,''); 
					//var column_name = $("#" + containerID + "_table thead tr th").eq(idx).text().replace(regex,'');
					//customData.push({"key": column_name, "value": rowData[idx].replace(regex,'')})
				});
				m_Controller.app.drilldown(myTable.parent.id, row, rowData);
			});	
		}
	};
	console.log ("Done");
}

function showChildTable (tgt_widget_id, row, childData){
	if (row.child.isShown()){
		row.child.hide();
		row.data()[0] = "<img src=\"../ubaweb/images/plus-icon.png\"></img>";
		row.invalidate(row.data()).draw();
	}
	else{	
		row.data()[0] = "<img src=\"../ubaweb/images/minus-icon.png\"></img>";
		row.invalidate(row.data()).draw();
		var containerID = tgt_widget_id*100 + row.index();
		var html = "<tr><td><div id=\"report_" + containerID + "\"></div></td></tr>";
		row.child (html).show();
		var additionalParams = new Object();
		additionalParams.value = childData;
		var targetWidget = m_Controller.app.getWidgetWrapper(tgt_widget_id); 
		targetWidget.properties.visible = 'true';
		targetWidget.containerID = 'report_'+ containerID;
		m_Controller.getResults (tgt_widget_id, additionalParams);
	}	

}
var DEFAULT_FONTS = ["normal 14px arial", "normal 16px arial", "normal 18px arial", "normal 20px arial", "normal 20px arial", "normal 22px arial", "normal 24px arial", "normal 26px arial"];
var DEFAULT_COLORS = ["#0E0505", "#BA4D5B", "#AC9A32", "#AC9A32", "#0B4447", "#0B4447", "#0E0505", "#AC9A32"];
var DEFAULT_TITLE_FONT = "bold 16px verdana";
var DEFAULT_TITLE_COLOR="red";
//SRC-20022013
var DEFAULT_TITLE_BAR_COLOR="#cccccc";

// WORD CLOUD COMPONENT
function WordCloud(params){
	console.log ("Creating word cloud");
	this.params = params;
	this.properties = params.properties;
	// set defaults
	
	if (this.properties.fonts == null)
		this.properties.fonts = DEFAULT_FONTS;
	if (this.properties.colors == null)
		this.properties.colors = DEFAULT_COLORS;
	if (this.properties.titleFont == null)
		this.properties.titleFont = DEFAULT_TITLE_FONT;
	if (this.properties.titleColor == null)
		this.properties.titleColor = DEFAULT_TITLE_COLOR;
	if (this.properties.title == null)
		this.properties.title = "Word Cloud";
		//SRC-20022013
	if (this.properties.titleBarColor == null)
		this.properties.titleBarColor = DEFAULT_TITLE_BAR_COLOR;
	

	this.setJSONData = function (results, name, properties){
		this.results = results;	
		
		// shuffle results
		// set quantiles
		var i;
		var data = this.results.data;
                for (i = 0; i < data.length; i ++)
			data[i][1] = parseInt (data[i][1], 10);	
		var min = data[0][1];
		var max = data[0][1];
		for (i = 1; i < data.length; i ++){
			if (data[i][1] < min)
				min = data[i][1];
			if (data[i][1] > max)
				max = data[i][1];
		}
		
		var range = max - min;
		console.log ("min =" + min + ", max = " + max);
		for (i = 0; i < data.length; i ++){
			data[i][2] = Math.round (((data[i][1] - min)/range) * (this.properties.fonts.length - 1));
			console.log ("Set data[" + i + "][2] to " + data[i][2]);
		}
		
		
		
	};
	this.render = function (containerID){
		$("#" + containerID).empty();
		var data = this.results.data;
		var i;
		//SRC-20022013
		var html = "<center><div style=\"padding:4px 0px 4px 0px;background-color:" + this.properties.titleBarColor + ";font:" + this.properties.titleFont + ";color:" + this.properties.titleColor + "\">" + this.properties.title + "</div></center><p>&nbsp;</p>";
		for (i = 0; i < data.length; i ++){
			// col 0 has word, col1 has count, col2 has quantile
			html += "<span style=\"color:" + this.properties.colors[data[i][2]] + ";font:" + this.properties.fonts[data[i][2]] + ";padding:5px\" title=\"Count: " + data[i][1] + "\">" + data[i][0] + "</span>";
		}
		console.log (html);
		$("#" + containerID).append (html);
	};
	console.log ("Done");
}

function NotificationWidget (params){

	console.log ("creating Notification widget");
	this.params = params;
	this.properties = params.properties;
	
	this.setJSONData = function (results, name, properties){
		this.results = results;	
	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		//$("#tiles").empty();
		var data = this.results.rows;
		var colNames = this.results.column_names;
		
		
		var html = "<!-- top tiles -->";
        html += "<div id='notificationContainer' class='container'><section class='home-wapper'><div class ='row'><div class='col-6'><div class='home-box'><i class='fas fa-bell' style='float:left'></i><h2 class='title'>Notifications</h2><div class='notification-wapper' id='notification-data'>";

        var i, notificationNums = data.length;
        debugger;
        if(notificationNums==0)
        	{
        	 html+='<div class="no-data"><ul><li>There are no Notifications</li> </ul></div>';
        	}
        for (i = 0; i < notificationNums; i ++){
        	
        	html+='<div class="row"><div class="col-3 notification-date"><span class="month-year">'+data[i][2]+'</span></div><div class="col-9 notification-details"><h3>'+data[i][1]+'</h3><p>'+data[i][0]+'</p></div></div>';
        }
        
       
        html += "</div></div></div>";
        html+='<div class="col-6"><div class="home-box"><i class="fas fa-rss" style="float:left"></i><h2 class="title">Forum</h2><div class="no-data"><ul><li> Discussion Forum</li> <li> Internet Forum</li> <li> Task Forum</li> <li> Information Forum</li></ul></div></div></div>';
        html+='</div></section></div>'
        html += "<!-- /top tiles -->";

        $("#" + containerID).append (html);
		//console.log (html);
	};
	

	
	console.log ("Done");

}

function heartRate(params) {


	console.log("creating Transaction widget");
	this.params = params;
	this.properties = params.properties;

	this.setJSONData = function(results, name, properties) {
		this.results = results;
	};
	this.render = function(containerID) {

		this.containerID = containerID;
		$("#" + containerID).empty();
		// $("#tiles").empty();
		var data = this.results.rows;
		var x_origin_axis = [];
		for (var k = 0; k < data.length; k++) {
			var newZone = data[k][1];
			x_origin_axis.push(newZone)
		}
		function onlyUnique(value, index, self) {
			return self.indexOf(value) === index;
		}

		// usage example:
		
		var unique = x_origin_axis.filter(onlyUnique);
		var colNames = this.results.column_names;
		/*var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
		var uniqueDays=[];
		var firstDate='';
		var lastDate='';
		for(var weekday =0;weekday<unique.length;weekday++){
			if(weekday==0){
				firstDate=unique[weekday];
			}
			if(weekday==unique.length-1){
				lastDate=unique[weekday];
			}
		var d = new Date(unique[weekday]);
		var dayName = days[d.getDay()];
		uniqueDays.push(dayName);
		}*/
		debugger;
		var html = "<!-- top tiles -->";
		html += "<div id='container'>";
		$("#" + containerID).append(html);
		var jsonArrnew = [];
		var dateincludes = [];
		for (var l = 0; l < data.length; l++) {
			
			let key = data[l][0];
			if (!dateincludes.includes(key)) {
				var dataList = [];
				for (var g = 0; g < data.length; g++) {
					if (key == data[g][0]) {
						dataList.push(data[g][2]);
					}

				}
				dateincludes.push(key);
				jsonArrnew.push({
					name : key,
					data : dataList
				})
			}

		}
		console.log("Done:", jsonArrnew);
		Highcharts
				.chart(
						'container',
						{
							chart : {
								type : 'column'
							},
							title : {
								text : 'Heart Rate Zone Wise'
							},
							xAxis : {
								categories : unique,
								title : {
									text : 'Period'
								}
							},
							yAxis : {
								min : 0,
								title : {
									text : 'Minutes'
								},
								stackLabels : {
									enabled : true,
									style : {
										fontWeight : 'bold',
										color : (Highcharts.theme && Highcharts.theme.textColor)
												|| 'gray'
									}
								}
							},
							legend : {
								align : 'right',
								x : -30,
								verticalAlign : 'top',
								y : 25,
								floating : true,
								backgroundColor : (Highcharts.theme && Highcharts.theme.background2)
										|| 'white',
								borderColor : '#CCC',
								borderWidth : 1,
								shadow : false
							},
							tooltip : {
								headerFormat : '<b>{point.x}</b><br/>',
								pointFormat : '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
							},
							plotOptions : {
								column : {
									stacking : 'normal',
									dataLabels : {
										enabled : true,
										color : (Highcharts.theme && Highcharts.theme.dataLabelsColor)
												|| 'white'
									}
								}
							},
							series : jsonArrnew
						});

	};
}

function TransactionWidget (params){

	console.log ("creating Transaction widget");
	this.params = params;
	this.properties = params.properties;
	
	this.setJSONData = function (results, name, properties){
		this.results = results;	
	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		//$("#tiles").empty();
		var data = this.results.rows;
		var colNames = this.results.column_names;
		
		
		var html = "<!-- top tiles -->";
        html += '<div class="container"><section class="home-wapper"><div class="row"><div class="col-6"><div class="home-box"><i class="fas fa-certificate" style="float:left"></i><h2 class="title">Transactions</h2><div class="transation-wapper"><div class="reward-points">2456</div><label>Points</label><div class="height_100"><table id="transaction_list" ></table></div>';
       var sumPoints=0;
        for(var i=0;i<data.length;i++){
 		   
 		   sumPoints = sumPoints+parseFloat(data[i][3]);
 	   }
        html += '</div></div></div>';
 	   //var columns_name = data.column_names;
 	   
       /* html+=' <div id="BotChatGoesHere" class="chat" style="opacity: 0"></div><div class="toggleButtonClass"><img id="toggleButton" class="img-circle" style="background: transparent; height: 50px; cursor: pointer; border-radius: 50%; top:100px; position: absolute; bottom: 10px; right: 100px; animation:ganser 1.5s ease-out; animation-iteration-count: infinite;" src="https://stgapi.xpresso.ai/jefferson_bot/images/chaticon.png"></img><div id="buttonHoverText" style="border-radius: 50%; position: fixed; opacity: 0; bottom: 15px; right: 180px"><blockquote class="blockquote-reverse"><p class="alert alert-info" style="font-family: sans-serif; font-style: italic; font-size: small; font-weight: bold"> Click Here to Chat</p></blockquote></div></div>';*/
       /* html +='<div class="col-6"> <div class="panel panel-primary"><div class="panel-heading" id="accordion"> <span class="glyphicon glyphicon-comment"></span> Chat<div class="btn-group pull-right"><a type="button" class="btn btn-default btn-xs" data-toggle="collapse" data-parent="#accordion" href="#collapseOne"><span class="glyphicon glyphicon-chevron-down"></span></a></div></div> <div class="panel-collapse collapse" id="collapseOne"><div class="panel-body"><ul class="chat"> <li class="right clearfix"><span class="chat-img pull-right"><img src="http://placehold.it/50/FA6F57/fff&text=ME" alt="User Avatar" class="img-circle" /></span> <div class="chat-body clearfix"><div class="header"> <small class=" text-muted"><span class="glyphicon glyphicon-time"></span>15 mins ago</small> <strong class="pull-right primary-font">Bhaumik Patel</strong> </div> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur bibendum ornare dolor, quis ullamcorper ligula sodales. </p> </div> </li> </ul></div><div class="panel-footer"> <div class="input-group"> <input id="btn-input" type="text" class="form-control input-sm" placeholder="Type your message here..." /> <span class="input-group-btn"> <button class="btn btn-warning btn-sm" id="btn-chat"> Send</button> </span> </div></div></div></div></div>';*/
         html+='<div class="col-6"><div id="BotChatGoesHere" class="chat chatRotate" style="opacity: 1; transition: all 1s ease 0s;"><div data-reactroot="" class="wc-chatview-panel"><div class="wc-header" style="background-color:#5e7f26 !important"><span>Chat</span><i class="fas fa-comments" style="float:left"></i></div><i class="fas fa-comments" style="float:left"></i><div class="wc-message-pane"><div class="wc-message-groups" role="log" tabindex="0"><div class="wc-message-group-content" style="margin-top: 222px;"><div data-activity-id="3PxZIGMgcbFHfjUqD0ZmFV|0000000" class="wc-message-wrapper list"><div class="wc-message wc-message-from-bot"><div class="wc-message-content"><svg class="wc-message-callout"><path class="point-left" d="m0,6 l6 6 v-12 z"></path><path class="point-right" d="m6,6 l-6 6 v-12 z"></path></svg><div><div class="format-markdown"><p>Hi there, Welcome to Jefferson bot.</p></div><!-- react-empty: 42 --></div></div></div><div class="wc-message-from wc-message-from-bot"><span><!-- react-text: 45 -->JeffersonBot<!-- /react-text --><!-- react-text: 46 --> at 6:02:11 PM<!-- /react-text --></span></div></div></div></div><div class="wc-suggested-actions"><!-- react-empty: 8 --></div></div><div class="wc-console has-upload-button"><label class="wc-upload" for="wc-upload-input" tabindex="0"><svg><path d="M19.96 4.79m-2 0a2 2 0 0 1 4 0 2 2 0 0 1-4 0zM8.32 4.19L2.5 15.53 22.45 15.53 17.46 8.56 14.42 11.18 8.32 4.19ZM1.04 1L1.04 17 24.96 17 24.96 1 1.04 1ZM1.03 0L24.96 0C25.54 0 26 0.45 26 0.99L26 17.01C26 17.55 25.53 18 24.96 18L1.03 18C0.46 18 0 17.55 0 17.01L0 0.99C0 0.45 0.47 0 1.03 0Z"></path></svg></label><input type="file" id="wc-upload-input" tabindex="-1" multiple="" aria-label="Upload file" role="button"><div class="wc-textbox"><input type="text" class="wc-shellinput" value="" placeholder="Type your message..." aria-label="Type your message..." aria-live="polite"></div><button class="wc-send" aria-label="Send" role="button" tabindex="0" type="button"><svg><path d="M26.79 9.38A0.31 0.31 0 0 0 26.79 8.79L0.41 0.02C0.36 0 0.34 0 0.32 0 0.14 0 0 0.13 0 0.29 0 0.33 0.01 0.37 0.03 0.41L3.44 9.08 0.03 17.76A0.29 0.29 0 0 0 0.01 17.8 0.28 0.28 0 0 0 0.01 17.86C0.01 18.02 0.14 18.16 0.3 18.16A0.3 0.3 0 0 0 0.41 18.14L26.79 9.38ZM0.81 0.79L24.84 8.79 3.98 8.79 0.81 0.79ZM3.98 9.37L24.84 9.37 0.81 17.37 3.98 9.37Z"></path></svg></button><button class="wc-mic hidden inactive" aria-label="Speak" role="button" tabindex="0" type="button"><svg width="28" height="22" viewBox="0 0 58 58"><path d="M 44 28 C 43.448 28 43 28.447 43 29 L 43 35 C 43 42.72 36.72 49 29 49 C 21.28 49 15 42.72 15 35 L 15 29 C 15 28.447 14.552 28 14 28 C 13.448 28 13 28.447 13 29 L 13 35 C 13 43.485 19.644 50.429 28 50.949 L 28 56 L 23 56 C 22.448 56 22 56.447 22 57 C 22 57.553 22.448 58 23 58 L 35 58 C 35.552 58 36 57.553 36 57 C 36 56.447 35.552 56 35 56 L 30 56 L 30 50.949 C 38.356 50.429 45 43.484 45 35 L 45 29 C 45 28.447 44.552 28 44 28 Z"></path><path id="micFilling" d="M 28.97 44.438 L 28.97 44.438 C 23.773 44.438 19.521 40.033 19.521 34.649 L 19.521 11.156 C 19.521 5.772 23.773 1.368 28.97 1.368 L 28.97 1.368 C 34.166 1.368 38.418 5.772 38.418 11.156 L 38.418 34.649 C 38.418 40.033 34.166 44.438 28.97 44.438 Z"></path><path d="M 29 46 C 35.065 46 40 41.065 40 35 L 40 11 C 40 4.935 35.065 0 29 0 C 22.935 0 18 4.935 18 11 L 18 35 C 18 41.065 22.935 46 29 46 Z M 20 11 C 20 6.037 24.038 2 29 2 C 33.962 2 38 6.037 38 11 L 38 35 C 38 39.963 33.962 44 29 44 C 24.038 44 20 39.963 20 35 L 20 11 Z"></path></svg></button></div></div></div></div>';
        html += "</div></section></div>";
        html += "<!-- /top tiles -->";

        $("#" + containerID).append (html);
        $("#" + containerID).find('table').DataTable( {
 	    	
 	    	"data" : data,
 	    	"order": [],
 	    	"language": {
 	    	      "emptyTable": "No Transactions"
 	    	    },
     	
     		"columns":[
 	    		{"title":"Date"},
 	    		{"title":"PartnerName"
 	    			},
 	    		{"title":"Description"},
 	    		{"title":"Points"}
 	    		]
 		        
 	    });
        $("#" + containerID).find('.reward-points').text(sumPoints);
/*        var $chatbox = $('.chatbox'),
        $chatboxTitle = $('.chatbox__title'),
        $chatboxTitleClose = $('.chatbox__title__close'),
        $chatboxCredentials = $('.chatbox__credentials');
    $chatboxTitle.on('click', function() {
        $chatbox.toggleClass('chatbox--tray');
    });
    $chatboxTitleClose.on('click', function(e) {
        e.stopPropagation();
        $chatbox.addClass('chatbox--closed');
    });
    $chatbox.on('transitionend', function() {
        if ($chatbox.hasClass('chatbox--closed')) $chatbox.remove();
    });
    $chatboxCredentials.on('submit', function(e) {
        e.preventDefault();
        $chatbox.removeClass('chatbox--empty');
    });
*/       /* "use strict";

        var userid = "id";
        var username = 'user';

        ReactDOM.render(React.createElement(BotChat.Chat, {

          directLine: {
            secret: "7UqkG0kGWAs.cwA.K5c._oucpbPBh1PseOeFCogoS028dkB2UVsy7eT1-8rhIy0"
          },

          user: {
            id: userid,
            name: username
          }
        }), document.getElementById('BotChatGoesHere'));
        
        
        $("#toggleButton").click(function(){
            if ($("#BotChatGoesHere").css("opacity") === "0") {
              $('.wc-chatview-panel').css("transform","initial")
              $("#BotChatGoesHere").css("opacity", "1")
              $("#BotChatGoesHere").addClass("chatRotate")
              $('#BotChatGoesHere').css("transition","1s ease")
              $('#toggleButton').attr('src','/HealthyCity/assets/icons/fitbit-logo.png')
              $("#buttonHoverText").css("opacity","0")
            } else {
              $('.wc-chatview-panel').css("transform", "rotate(-180deg)")
              $("#BotChatGoesHere").css("opacity", "0")
              $("#buttonHoverText").css("opacity","1")
              $("#BotChatGoesHere").css("transition", "0.5s ease")
              $('#toggleButton').attr('src','https://stgapi.xpresso.ai/jefferson_bot/images/chaticon.png')
              $("#BotChatGoesHere").removeClass("chatRotate")
            }
          });

          $("#toggleButton").hover(function(){
            if($("#BotChatGoesHere").css("opacity") === '0') {
              $("#buttonHoverText").css("opacity","1")
              $("#buttonHoverText").css("transition",".6s ease")
            }
          },function(){
            $("#buttonHoverText").css("opacity","0")
            $("#buttonHoverText").css("transition",".6s ease")
          });*/

		//console.log (html);
	};
	

	
	console.log ("Done");

}



var DEFAULT_SECTION_TITLE_FONT = "bold 16px verdana";
var DEFAULT_SECTION_TITLE_COLOR = "#0E0505";
var DEFAULT_CONTENT_FONT = "13px verdana";
var DEFAULT_CONTENT_COLOR="black";

// XPRESSO DISTILLER COMPONENT
// Displays Expressions, Aspects, Entities and Sentiments
function XPressoDistiller(params){
	console.log ("Creating XPresso Distiller");
	this.params = params;
	this.properties = params.properties;
	// set defaults
	
	if (this.properties.sectionTitleFont == null)
		this.properties.sectionTitleFont = DEFAULT_SECTION_TITLE_FONT;
	if (this.properties.sectionTitleColor == null)
		this.properties.sectionTitleColor = DEFAULT_SECTION_TITLE_COLOR;
	if (this.properties.contentFont == null)
		this.properties.contentFont = DEFAULT_CONTENT_FONT;
	if (this.properties.contentColor == null)
		this.properties.contentColor = DEFAULT_CONTENT_COLOR;

	this.setJSONData = function (results, name, properties){
		this.results = results;	
		var xpressoResults = JSON.parse (results.data[0][0]);
		console.log ("Data is");
		console.log (xpressoResults);
		var feedback = xpressoResults.x
		
		// get sentiment
		var confidence = feedback["overall_sentiment confidence"]*100;
		this.overall_sentiment = {"sentiment": feedback.overall_sentiment, "confidence": confidence.toFixed(0)};
		
		
		// get entities
		this.aspects = new Array();
		this.entities = new Array();
		var i;
		for (i = 0; i < feedback.Entities.length; i ++){
			this.entities[this.entities.length] = feedback.Entities[i]["actual matched"]; 
		}
		
		// get expressions and aspects
		var j, k, l;
		this.expressions = new Array();
		this.aspects = new Array();
		var about = "";
		for (i = 0; i < feedback.Expressions.length; i ++){
			if (feedback.Expressions[i].expression != "UNKNOWN"){
				about = "";
				for (j = 0; j < feedback.Expressions[i].About.length; j ++){
					this.aspects[this.aspects.length] = feedback.Expressions[i].About[j].Aspect;
					about += feedback.Expressions[i].About[j].Aspect;
					if (j < feedback.Expressions[i].About.length - 1)
						about += ", ";
					
				}
				this.expressions[this.expressions.length] = {"type":feedback.Expressions[i].expression, "sentiment":feedback.Expressions[i].Sentiment, "about": about};
			}
		}
		
		
		
		
	};
	this.render = function (containerID){
		$("#" + containerID).empty();
		var data = this.results.data;
		var i;
		
		// Expressions
		var html = "<center><span style=\"font:" + this.properties.sectionTitleFont + ";color:" + this.properties.sectionTitleColor + "\">Expressions</span></center><p/>";
		for (i = 0; i < this.expressions.length; i ++)
			html += "<span style=\"color:" + this.properties.contentColor + ";font:" + this.properties.contentFont + "\">" + ((this.expressions[i].type == "OPINION")?toCamelCase (this.expressions[i].sentiment) + " ":"") + toCamelCase (this.expressions[i].type) + " (about " + this.expressions[i].about + ")</span><br/>";
		html += "<p>&nbsp;</p>";

		// Entities
		html += "<center><span style=\"font:" + this.properties.sectionTitleFont + ";color:" + this.properties.sectionTitleColor + "\">Entities</span></center><p/>";
		for (i = 0; i < this.entities.length; i ++)
			html += "<span style=\"color:" + this.properties.contentColor + ";font:" + this.properties.contentFont + "\">" + this.entities[i] + "</span><br/>";
		html += "<p>&nbsp;</p>";

		// Aspects
		html += "<center><span style=\"font:" + this.properties.sectionTitleFont + ";color:" + this.properties.sectionTitleColor + "\">Aspects</span></center><p/>";
		for (i = 0; i < this.aspects.length; i ++)
			html += "<span style=\"color:" + this.properties.contentColor + ";font:" + this.properties.contentFont + "\">" + this.aspects[i] + "</span><br/>";
		html += "<p>&nbsp;</p>";
		
		// Sentiment
		html += "<center><span style=\"font:" + this.properties.sectionTitleFont + ";color:" + this.properties.sectionTitleColor + "\">Sentiment</span></center><p/>";
		html += "<span style=\"color:" + this.properties.contentColor + ";font:" + this.properties.contentFont + "\">Overall: " + this.overall_sentiment.sentiment + "</span><br/>";
		html += "<span style=\"color:" + this.properties.contentColor + ";font:" + this.properties.contentFont + "\">Confidence: " + this.overall_sentiment.confidence + "%</span><br/>";
		html += "<p>&nbsp;</p>";
		
		console.log (html);
		$("#" + containerID).append (html);
	};
	console.log ("Done");
}

var DEFAULT_ENTITY_FONT = "bold 16px verdana";
var DEFAULT_ENTITY_COLOR = "blue";
var DEFAULT_POSITIVE_SENTIMENT_FONT = "bold 16px verdana";
var DEFAULT_POSITIVE_SENTIMENT_COLOR = "green";
var DEFAULT_NEGATIVE_SENTIMENT_FONT = "bold 16px verdana";
var DEFAULT_NEGATIVE_SENTIMENT_COLOR = "red";
var DEFAULT_NEUTRAL_SENTIMENT_FONT = "bold 16px verdana";
var DEFAULT_NEUTRAL_SENTIMENT_COLOR = "orange";
// HIGHLIGHTS ENTITIES IN TEXT
function EntityHighlighter(params){
	console.log ("Creating Entity Highlighter");
	this.params = params;
	this.properties = params.properties;
	// set defaults
	
	if (this.properties.entityFont == null)
		this.properties.entityFont = DEFAULT_ENTITY_FONT;
	if (this.properties.entityColor == null)
		this.properties.entityColor = DEFAULT_ENTITY_COLOR;
	if (this.properties.positiveSentimentFont == null)
		this.properties.positiveSentimentFont = DEFAULT_POSITIVE_SENTIMENT_FONT;
	if (this.properties.positiveSentimentColor == null)
		this.properties.positiveSentimentColor = DEFAULT_POSITIVE_SENTIMENT_COLOR;
	if (this.properties.negativeSentimentFont == null)
		this.properties.negativeSentimentFont = DEFAULT_NEGATIVE_SENTIMENT_FONT;
	if (this.properties.negativeSentimentColor == null)
		this.properties.negativeSentimentColor = DEFAULT_NEGATIVE_SENTIMENT_COLOR;
	if (this.properties.neutralSentimentFont == null)
		this.properties.neutralSentimentFont = DEFAULT_NEUTRAL_SENTIMENT_FONT;
	if (this.properties.neutralSentimentColor == null)
		this.properties.neutralSentimentColor = DEFAULT_NEUTRAL_SENTIMENT_COLOR;

	this.setJSONData = function (results, name, properties){
		this.results = results;	
		var xpressoResults = JSON.parse (results.data[0][0]);
		// get feedback 
		var feedback = xpressoResults.x;
		
		// get original phrase
		this.original_phrase = document.forms[1].elements["phrase"].value;
		console.log ("Original Phrase:" + this.original_phrase);
		
		// get sentiment phrases
		var i;
		var j, k, l;
		this.sentiment_phrases = new Array();
		for (i = 0; i < feedback.Expressions.length; i ++){
			if (feedback.Expressions[i].expression != "UNKNOWN"){
				sentiment_phrases =feedback.Expressions[i]["sentiment phrases"]; 
				for (j = 0; j < sentiment_phrases.length; j ++){
					this.sentiment_phrases[this.sentiment_phrases.length] = sentiment_phrases[j];
				}
			}
		}
		
		this.entities = new Array();
		for (i = 0; i < feedback.Entities.length; i ++){
			this.entities[this.entities.length] = feedback.Entities[i]["actual matched"]; 
		}

		
	};
	this.render = function (containerID){
		$("#" + containerID).empty();
		var data = this.results.data;
		var i;
		
		// highlight sentiment phrases and entities
		var html = "";
		console.log ("Original Phrase: " + this.original_phrase);
		for (i = 0; i < this.entities.length; i ++)
			this.original_phrase = this.original_phrase.replace (this.entities[i], "<span style=\"color:" + this.properties.entityColor + ";font:" + this.properties.entityFont + "\">" + this.entities[i] + "</span>");
		for (i = 0; i < this.sentiment_phrases.length; i ++){
			if (this.sentiment_phrases[i]["polarity score"] > 0.7)
				this.original_phrase = this.original_phrase.replace (this.sentiment_phrases[i].phrase, "<span style=\"color:" + this.properties.positiveSentimentColor + ";font:" + this.properties.positiveSentimentFont + "\">" + this.sentiment_phrases[i].phrase + "</span>");
			else if (this.sentiment_phrases[i]["polarity score"] < -0.2)
				this.original_phrase = this.original_phrase.replace (this.sentiment_phrases[i].phrase, "<span style=\"color:" + this.properties.negativeSentimentColor + ";font:" + this.properties.negativeSentimentFont + "\">" + this.sentiment_phrases[i].phrase + "</span>");
			else
				this.original_phrase = this.original_phrase.replace (this.sentiment_phrases[i].phrase, "<span style=\"color:" + this.properties.neutralSentimentColor + ";font:" + this.properties.neutralSentimentFont + "\">" + this.sentiment_phrases[i].phrase + "</span>");
		}
			this.original_phrase = this.original_phrase.replace (this.sentiment_phrases[i], "<span style=\"color:" + this.properties.entityColor + ";font:" + this.properties.entityFont + "\">" + this.entities[i] + "</span>");
		html = this.original_phrase;
		$("#" + containerID).append (html);
	};
	console.log ("Done");
	
}

function toCamelCase (word){
	var changedWord = word.toLowerCase();
	firstChar = new String (changedWord.charAt(0)).toUpperCase();
	changedWord = firstChar + changedWord.substring (1, changedWord.length);
	return changedWord;
}

//KPI Strip COMPONENT
function KPIStrip (params){
	console.log ("Creating KPI Strip");
	this.params = params;
	this.properties = params.properties;
	
	this.setJSONData = function (results, name, properties){
		this.results = results;	
	};
	this.render = function (containerID){
		this.containerID = containerID;
		//$("#" + containerID).empty();
		$("#tiles").empty();
		var data = this.results.rows;
		var colNames = this.results.column_names;
		
		// 3 columns expected
		// col 1 - name of KPI (string)
		// col 2 - value of KPI (decimal)
		// col 3 - change in value of KPI 
		// (decimal or null or blank - if null or blank, will not be displayed)
		
		var html = "<!-- top tiles -->";
        html += "<div class=\"data-content row tile_count \">";

        var i, numKPIs = data.length;
        for (i = 0; i < numKPIs; i ++){
            html += "<div class=\"col animated flipInY  tile_stats_count\">";
            html += "<div class=\"right\">";
            html += "<span class=\"count_top\">" + data[i][0] + "</span>";
            html += "<div class=\"count\">" + data[i][1] + "</div>";
            if (data[i][2] != null && data[i][2] != ""){
                html += "<span class=\"count_bottom\">";
                if (data[i][2] > 0)
                	html += "<i class=\"green\"><i class=\"fa fa-sort-asc\">";
                else
                	html += "<i class=\"red\"><i class=\"fa fa-sort-desc\">";
                html += "</i>" + Math.abs (data[i][2]);
		console.log("data[i][4]="+data[i][4]);
                if(data[i][4] == "yes" || data[i][4]=="Yes")
                	html+= "% </i></span>";
                else
                	html+= " </i></span>";
            }
            html += "</div>";
            if(data[i][3] != null && data[i][3] != "")
            	{
            	html+="<div class=\"r single-line\">" + data[i][3] + "</div>";
            	}
            html += "</div>";
            
            
        	
        }
        

        html += "</div>";
        html += "<!-- /top tiles -->";

		$("#tiles").append (html);
		//console.log (html);
	};
	

	
	console.log ("Done");
}

// Widget contained within an external HTML file
// the external component must specify the functions to be callsed for
// setJSONData and render in the params
function HTMLWidget (params){
	this.params = params;
	this.properties = params.properties;
	this.iFrameLoaded = function(containerID, src) {
	    var deferred = $.Deferred(),
	        iframe = $("<iframe class='hiddenFrame'></iframe>").attr({
	            "id": "iframe_" + containerID,
	            "src": src 
	        });

	    iframe.load(deferred.resolve);
	    iframe.appendTo("#" + containerID);

	    deferred.done(function() {
	        console.log("iframe loaded: " + "iframe_" + containerID);
	    });

	    return deferred.promise();
	}

	this.renderIFrame = function() {
	    var childWindow = document.getElementById("iframe_" + this.containerID).contentWindow;
	}

	this.setJSONData = function (results, name, properties){
		this.results = results;
	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		$.when(this.iFrameLoaded(containerID, this.properties.src)).then(this.renderIFrame());
	};
	
}

// Widget which switches between one of several child widgets, depending on data
function CompoundWidget (params){
	this.params = params;
	this.properties = params.properties;
	this.setJSONData = function (results, name, properties){
		this.results = results;
		this.name = name;
		this.properties = properties;
		this.child = null;
		// switch child, and call child's setJSONData method
		// first column contains child type
		if ((results.rows != null) && (results.rows.length > 0)){
			var childType = results.rows[0][0];
			// get widget ID of child type from properties
			var i, numMappings = properties.widget_mappings.length;
			var widgetID = 0;
			for (i = 0; i < numMappings; i ++){
				if (properties.widget_mappings[i][childType] != null)
					widgetID = properties.widget_mappings[i][childType];
			}
	        var widgetDef = m_Controller.app.getWidget(widgetID);
	        console.log("WidgetDef=" + widgetDef);
	        if ((this.child = m_Controller.app.getWidgetWrapper (widgetDef.id)) == null){
	        	this.child = new WidgetWrapper(widgetDef, "report_" +
	        			this.container.id);
	        	this.child.parent = this.container;
	        	m_Controller.app.getCurrentPage().widgetWrappers.push (this.child);
	        }
	        this.child.widget.setJSONData(results, name, widgetDef.properties);
		}
	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		if (this.child != null)
			this.child.widget.render(containerID);
		else
			$("#" + containerID).html("<span class=\"caption\">No data found</span>");
	};
	
}

//Editable Grid Widget
function EditableGridWidget (params){
	this.params = params;
	this.properties = params.properties;
	this.properties.detectDir = function(){};
	this.properties.localisset = function(str){return false;};
	this.grid = new EditableGrid (this.properties.name, this.properties);
	this.grid.modelChanged = function (rowIndex, columnIndex, previousValue, newValue, row){
			//alert ("Element at row " + rowIndex + ", column " + columnIndex + " + changed from " + previousValue + " to " + newValue);
	};
	 
	this.setJSONData = function (results, name, properties){
		this.results = results;
		this.name = name;
		this.properties = properties;
		// check if a custom function has been defined for data mapping
		if (this.properties.dataMappingFunction != null){
			window[this.properties.dataMappingFunction](this);
			return;
		}
		// no custom mapping function defined - populate grid by displaying all cols
		this.gridData = {"metadata":[], "data":[]};
		
		// first, create all columns
		var i, nCols = this.results.column_names.length;
		for (i = 0; i < nCols; i ++){
			var col_name = this.results.column_names[i];
			var column = {
				name: col_name,
				label: col_name,
				datatype: "string",
				editable: (properties.editableColumns != null && properties.editableColumns.indexOf(col_name) > -1)?true:false
			}
			this.gridData.metadata.push(column);
			
		}
		
		// populate rows
		var rows = this.results.rows;
		var j, nRows = rows.length;
		var defaultRowId = 1;
		for (i = 0; i < nRows; i ++){
			var rowData = {};  
			rowData.id = defaultRowId ++;
			rowData.values = {};
			
			for (j = 0; j < nCols; j++) 
				rowData.values[this.results.column_names[j]] = rows[i][j];

			// add row data in our model
			this.gridData.data.push(rowData);
		}
	};
	this.render = function (containerID){
		this.containerID = containerID;
		$("#" + containerID).empty();
		console.log(this.gridData);
		this.grid.loadJSONFromString(this.gridData);
		this.grid.renderGrid(containerID, "testgrid");
		var widgetID = containerID.split("_")[1];
		var buttonDiv = $(document.createElement("DIV"));
		buttonDiv.append("<input value='Submit' type='button' id='sbmt_" + this.id + "'></input>");
		$("#" + containerID).append ($(buttonDiv));
		var props = this.properties;
		$("#" + containerID).off ("click", "#sbmt_" + this.id);		
		$("#" + containerID).on ("click", "#sbmt_" + this.id, function(){
			var widgetWrapperID = this.id.split("_")[1];
			var widgetWrapper = m_Controller.app.getWidgetWrapper (widgetWrapperID);
			console.log(widgetWrapper.widget.properties);
			var widget = widgetWrapper.widget;
			if (widget.properties.saveFunction)
				window[widget.properties.saveFunction](widget.grid, widget.results, widget.id, widget.gridData);
		});

	};
	
}
